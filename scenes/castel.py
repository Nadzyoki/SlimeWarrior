from ursina import *
from time import perf_counter

scene_parent = Entity()

if __name__ == '__main__':
    app = Ursina()

t = perf_counter()

# unique meshes
meshes = {

'Cube' : Mesh(
    vertices=[(-10.0875, 0.1194, 13.5828), (10.0875, 0.1194, -13.5828), (10.0875, 0.1194, 13.5828), (10.0875, 0.1194, -13.5828), (-10.0875, -0.1194, -13.5828), (10.0875, -0.1194, -13.5828), (-10.0875, 0.1194, -13.5828), (-10.0875, -0.1194, 13.5828), (-10.0875, -0.1194, -13.5828), (10.0875, -0.1194, 13.5828), (-10.0875, -0.1194, -13.5828), (-10.0875, -0.1194, 13.5828), (10.0875, 0.1194, 13.5828), (10.0875, -0.1194, -13.5828), (10.0875, -0.1194, 13.5828), (-10.0875, 0.1194, 13.5828), (10.0875, -0.1194, 13.5828), (-10.0875, -0.1194, 13.5828), (-10.0875, 0.1194, 13.5828), (-10.0875, 0.1194, -13.5828), (10.0875, 0.1194, -13.5828), (10.0875, 0.1194, -13.5828), (-10.0875, 0.1194, -13.5828), (-10.0875, -0.1194, -13.5828), (-10.0875, 0.1194, -13.5828), (-10.0875, 0.1194, 13.5828), (-10.0875, -0.1194, 13.5828), (10.0875, -0.1194, 13.5828), (10.0875, -0.1194, -13.5828), (-10.0875, -0.1194, -13.5828), (10.0875, 0.1194, 13.5828), (10.0875, 0.1194, -13.5828), (10.0875, -0.1194, -13.5828), (-10.0875, 0.1194, 13.5828), (10.0875, 0.1194, 13.5828), (10.0875, -0.1194, 13.5828)],
    normals=[(0.19245, 0.57735, 0.19245), (0.19245, 0.57735, 0.19245), (0.19245, 0.57735, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.57735, -0.19245, -0.19245), (-0.57735, -0.19245, -0.19245), (-0.57735, -0.19245, -0.19245), (-0.19245, -0.57735, 0.19245), (-0.19245, -0.57735, 0.19245), (-0.19245, -0.57735, 0.19245), (0.57735, -0.19245, 0.19245), (0.57735, -0.19245, 0.19245), (0.57735, -0.19245, 0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, 0.57735, -0.19245), (-0.19245, 0.57735, -0.19245), (-0.19245, 0.57735, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.57735, 0.19245, 0.19245), (-0.57735, 0.19245, 0.19245), (-0.57735, 0.19245, 0.19245), (0.19245, -0.57735, -0.19245), (0.19245, -0.57735, -0.19245), (0.19245, -0.57735, -0.19245), (0.57735, 0.19245, -0.19245), (0.57735, 0.19245, -0.19245), (0.57735, 0.19245, -0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735)],
    colors=[],
    uvs=[(0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5)],
),

'Cube_001' : Mesh(
    vertices=[(0.6251, 8.0233, -13.658), (0.6251, -0.0921, 13.6713), (0.6251, -0.0921, -13.658), (0.6251, 8.0233, 13.6713), (1.0, -0.0921, 13.6713), (0.6251, -0.0921, 13.6713), (1.0, 8.0233, 13.6713), (1.0, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (1.0, 8.0233, -13.658), (0.6251, -0.0921, -13.658), (1.0, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (0.6251, -0.0921, -13.658), (0.6251, -0.0921, 13.6713), (0.6251, 8.0233, 13.6713), (1.0, 8.0233, -13.658), (1.0, 8.0233, 13.6713), (0.6251, 8.0233, -13.658), (0.6251, 8.0233, 13.6713), (0.6251, -0.0921, 13.6713), (0.6251, 8.0233, 13.6713), (1.0, 8.0233, 13.6713), (1.0, -0.0921, 13.6713), (1.0, 8.0233, 13.6713), (1.0, 8.0233, -13.658), (1.0, -0.0921, -13.658), (1.0, 8.0233, -13.658), (0.6251, 8.0233, -13.658), (0.6251, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (1.0, -0.0921, -13.658), (0.6251, -0.0921, -13.658), (0.6251, 8.0233, 13.6713), (0.6251, 8.0233, -13.658), (1.0, 8.0233, -13.658)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),

'Cube_002' : Mesh(
    vertices=[(0.6251, 8.0233, -13.658), (0.6251, -0.0921, 13.6713), (0.6251, -0.0921, -13.658), (0.6251, 8.0233, 13.6713), (1.0, -0.0921, 13.6713), (0.6251, -0.0921, 13.6713), (1.0, 8.0233, 13.6713), (1.0, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (1.0, 8.0233, -13.658), (0.6251, -0.0921, -13.658), (1.0, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (0.6251, -0.0921, -13.658), (0.6251, -0.0921, 13.6713), (0.6251, 8.0233, 13.6713), (1.0, 8.0233, -13.658), (1.0, 8.0233, 13.6713), (0.6251, 8.0233, -13.658), (0.6251, 8.0233, 13.6713), (0.6251, -0.0921, 13.6713), (0.6251, 8.0233, 13.6713), (1.0, 8.0233, 13.6713), (1.0, -0.0921, 13.6713), (1.0, 8.0233, 13.6713), (1.0, 8.0233, -13.658), (1.0, -0.0921, -13.658), (1.0, 8.0233, -13.658), (0.6251, 8.0233, -13.658), (0.6251, -0.0921, -13.658), (1.0, -0.0921, 13.6713), (1.0, -0.0921, -13.658), (0.6251, -0.0921, -13.658), (0.6251, 8.0233, 13.6713), (0.6251, 8.0233, -13.658), (1.0, 8.0233, -13.658)],
    normals=[(-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.57735, -0.19244, -0.19245), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (-0.19245, -0.19245, 0.57735), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.57735, -0.19244, 0.19245), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (0.19245, -0.19245, -0.57735), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (-0.19245, -0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (0.19245, 0.57733, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (-0.57735, 0.19244, 0.19245), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.19245, 0.19245, 0.57735), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (0.57735, 0.19244, -0.19245), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (-0.19245, 0.19245, -0.57735), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (0.19245, -0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245), (-0.19245, 0.57733, -0.19245)],
    colors=[],
    uvs=[(0.625, 0.0), (0.375, 0.25), (0.375, 0.0), (0.625, 0.25), (0.375, 0.5), (0.375, 0.25), (0.625, 0.5), (0.375, 0.75), (0.375, 0.5), (0.625, 0.75), (0.375, 1.0), (0.375, 0.75), (0.375, 0.5), (0.125, 0.75), (0.125, 0.5), (0.875, 0.5), (0.625, 0.75), (0.625, 0.5), (0.625, 0.0), (0.625, 0.25), (0.375, 0.25), (0.625, 0.25), (0.625, 0.5), (0.375, 0.5), (0.625, 0.5), (0.625, 0.75), (0.375, 0.75), (0.625, 0.75), (0.625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.75), (0.125, 0.75), (0.875, 0.5), (0.875, 0.75), (0.625, 0.75)],
),
}
print('loaded models:', perf_counter() - t)
t = perf_counter()

scene_parent.Floor = Entity(
    name='Floor',
    parent=scene_parent,
    position=Vec3(0.0, 0.0, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=deepcopy(meshes['Cube']),
    color=(0.8, 0.8, 0.8, 1.0),
    ignore=True,
    )
scene_parent.Wall_001 = Entity(
    name='Wall.001',
    parent=scene_parent,
    position=Vec3(-10.73288, 0.0, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=deepcopy(meshes['Cube_001']),
    ignore=True,
    )
scene_parent.Wall_002 = Entity(
    name='Wall.002',
    parent=scene_parent,
    position=Vec3(9.13002, 0.0, 0.0),
    rotation=(-0.0, -0.0, -0.0),
    scale=Vec3(1.0, 1.0, 1.0),
    model=deepcopy(meshes['Cube_002']),
    ignore=True,
    )
print('created entities:', perf_counter() - t)
if __name__ == '__main__':
    EditorCamera()
    app.run()
